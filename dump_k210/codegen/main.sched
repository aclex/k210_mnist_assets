.physical_buffer
%0 : <u8 [1,1,28,28] 784 bytes of [1,1,28,28]> @input[0, 784]
%1 : <u8 [1,32,28,28] 25088 bytes of [1,32,28,28]> @data[0, 25088]
%2 : <f32 [1,32,28,28] 100352 bytes of [1,32,28,28]> @data[25088, 125440]
%3 : <f32 [1,32,26,26] 86528 bytes of [1,32,26,26]> @data[125440, 211968]
%4 : <u8 [1,32,26,26] 21632 bytes of [1,32,26,26]> @data[103808, 125440]
%5 : <u8 [1,64,26,26] 43264 bytes of [1,64,26,26]> @data[60544, 103808]
%6 : <f32 [1,64,26,26] 173056 bytes of [1,64,26,26]> @data[103808, 276864]
%7 : <f32 [1,64,24,24] 147456 bytes of [1,64,24,24]> @data[276864, 424320]
%8 : <f32 [1,64,6,6] 9216 bytes of [1,64,6,6]> @data[267648, 276864]
%9 : <u8 [1,64,6,6] 2304 bytes of [1,64,6,6]> @data[265344, 267648]
%10 : <u8 [1,10,6,6] 360 bytes of [1,10,6,6]> @data[264984, 265344]
%11 : <f32 [1,10,6,6] 1440 bytes of [1,10,6,6]> @data[263544, 264984]
%12 : <f32 [1,10,4,4] 640 bytes of [1,10,4,4]> @data[262904, 263544]
%13 : <f32 [1,10] 40 bytes of [1,10]> @data[262864, 262904]
%14 : <f32 [1,1] 4 bytes of [1,1]> @data[262856, 262864]
%15 : <f32 [1,10] 40 bytes of [1,10]> @data[262816, 262856]
%16 : <u8 [1,10] 10 bytes of [1,10]> @data[262800, 262816]
%17 : <u8 [256] 256 bytes of [256]> @rdata[0, 256]
%18 : <u8 [1,10] 10 bytes of [1,10]> @data[262784, 262800]
%19 : <f32 [1,10] 40 bytes of [1,10]> @data[262744, 262784]
%20 : <f32 [1,1] 4 bytes of [1,1]> @data[262736, 262744]
%21 : <f32 [1,10] 40 bytes of [1,10]> @data[262696, 262736]
%22 : <u8 [1,10] 10 bytes of [1,10]> @data[262680, 262696]
%23 : <u8 [256] 256 bytes of [256]> @rdata[256, 512]
%24 : <u8 [1,10] 10 bytes of [1,10]> @output[0, 16]

.compute_sequence
fn main(%0) : (<u8 [1,1,28,28] 784 bytes of [1,1,28,28]>) -> (<u8 [1,10] 10 bytes of [1,10]>)
{
    %0 = Input() : () -> (<u8 [1,1,28,28] 784 bytes of [1,1,28,28]>)
    %1 = Call(%0) : (<u8 [1,1,28,28] 784 bytes of [1,1,28,28]>) -> (<u8 [1,32,28,28] 25088 bytes of [1,32,28,28]>)
    %2 = Dequantize(%1) : (<u8 [1,32,28,28] 25088 bytes of [1,32,28,28]>) -> (<f32 [1,32,28,28] 100352 bytes of [1,32,28,28]>)
    %3 = Pad(%2) : (<f32 [1,32,28,28] 100352 bytes of [1,32,28,28]>) -> (<f32 [1,32,26,26] 86528 bytes of [1,32,26,26]>)
    %4 = Quantize(%3) : (<f32 [1,32,26,26] 86528 bytes of [1,32,26,26]>) -> (<u8 [1,32,26,26] 21632 bytes of [1,32,26,26]>)
    %5 = Call(%4) : (<u8 [1,32,26,26] 21632 bytes of [1,32,26,26]>) -> (<u8 [1,64,26,26] 43264 bytes of [1,64,26,26]>)
    %6 = Dequantize(%5) : (<u8 [1,64,26,26] 43264 bytes of [1,64,26,26]>) -> (<f32 [1,64,26,26] 173056 bytes of [1,64,26,26]>)
    %7 = Pad(%6) : (<f32 [1,64,26,26] 173056 bytes of [1,64,26,26]>) -> (<f32 [1,64,24,24] 147456 bytes of [1,64,24,24]>)
    %8 = ReduceWindow2D(%7) : (<f32 [1,64,24,24] 147456 bytes of [1,64,24,24]>) -> (<f32 [1,64,6,6] 9216 bytes of [1,64,6,6]>)
    %9 = Quantize(%8) : (<f32 [1,64,6,6] 9216 bytes of [1,64,6,6]>) -> (<u8 [1,64,6,6] 2304 bytes of [1,64,6,6]>)
    %10 = Call(%9) : (<u8 [1,64,6,6] 2304 bytes of [1,64,6,6]>) -> (<u8 [1,10,6,6] 360 bytes of [1,10,6,6]>)
    %11 = Dequantize(%10) : (<u8 [1,10,6,6] 360 bytes of [1,10,6,6]>) -> (<f32 [1,10,6,6] 1440 bytes of [1,10,6,6]>)
    %12 = Pad(%11) : (<f32 [1,10,6,6] 1440 bytes of [1,10,6,6]>) -> (<f32 [1,10,4,4] 640 bytes of [1,10,4,4]>)
    %13 = ReduceWindow2D(%12) : (<f32 [1,10,4,4] 640 bytes of [1,10,4,4]>) -> (<f32 [1,10,1,1] 40 bytes of [1,10,1,1]>)
    %14[0, 4] = Reduce(%13) : (<f32 [1,10] 40 bytes of [1,10]>) -> (<f32 [1,1] 4 bytes of [1,1]>)
    %15 = Binary(%13, %14[0, 4]) : (<f32 [1,10] 40 bytes of [1,10]>, <f32 [1,1] 4 bytes of [1,1]>) -> (<f32 [1,10] 40 bytes of [1,10]>)
    %16[0, 10] = Quantize(%15) : (<f32 [1,10] 40 bytes of [1,10]>) -> (<u8 [1,10] 10 bytes of [1,10]>)
    %17 = Constant() : () -> (<u8 [256] 256 bytes of [256]>)
    %18[0, 10] = TableLookup1D(%16[0, 10], %17) : (<u8 [1,10] 10 bytes of [1,10]>, <u8 [256] 256 bytes of [256]>) -> (<u8 [1,10] 10 bytes of [1,10]>)
    %19 = Dequantize(%18[0, 10]) : (<u8 [1,10] 10 bytes of [1,10]>) -> (<f32 [1,10] 40 bytes of [1,10]>)
    %20[0, 4] = Reduce(%19) : (<f32 [1,10] 40 bytes of [1,10]>) -> (<f32 [1,1] 4 bytes of [1,1]>)
    %21 = Binary(%19, %20[0, 4]) : (<f32 [1,10] 40 bytes of [1,10]>, <f32 [1,1] 4 bytes of [1,1]>) -> (<f32 [1,10] 40 bytes of [1,10]>)
    %22[0, 10] = Quantize(%21) : (<f32 [1,10] 40 bytes of [1,10]>) -> (<u8 [1,10] 10 bytes of [1,10]>)
    %23 = Constant() : () -> (<u8 [256] 256 bytes of [256]>)
    %24[0, 10] = TableLookup1D(%22[0, 10], %23) : (<u8 [1,10] 10 bytes of [1,10]>, <u8 [256] 256 bytes of [256]>) -> (<u8 [1,10] 10 bytes of [1,10]>)
    return %24[0, 10] : (<u8 [1,10] 10 bytes of [1,10]>)
}
